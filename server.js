const express = require('express');
const path = require('path');
const axios = require('axios');
const crypto = require('crypto');
const fs = require('fs');

const app = express();
const PORT = 8000;

// Middleware —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ JSON
app.use(express.json({
    limit: '10mb',
    verify: (req, res, buf, encoding) => {
        try {
            JSON.parse(buf);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ JSON middleware:', error);
            console.error('‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', buf.toString());
            throw new Error('Invalid JSON format');
        }
    }
}));

app.use(express.static(path.join(__dirname)));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ JSON
app.use((error, req, res, next) => {
    if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
        console.error('‚ùå JSON Syntax Error:', error);
        return res.status(400).json({
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–Ω—ã—Ö'
        });
    }
    next();
});

// Session management (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø–∞–º—è—Ç–∏)
const sessions = new Map();
const captchaStore = new Map();
const smsCodeStore = new Map();
const registeredUsers = new Map();
const ordersDB = [];

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try {
    if (fs.existsSync('users.db.json')) {
        const usersData = JSON.parse(fs.readFileSync('users.db.json', 'utf8'));
        Object.entries(usersData).forEach(([username, userData]) => {
            registeredUsers.set(username, userData);
        });
        console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${registeredUsers.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    }
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try {
    if (fs.existsSync('orders.db.json')) {
        const ordersData = JSON.parse(fs.readFileSync('orders.db.json', 'utf8'));
        ordersDB.push(...ordersData);
        console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${ordersDB.length} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    }
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function hashPassword(password) {
    return crypto.createHash('sha256').update(password).digest('hex');
}

function generateCaptcha() {
    const a = Math.floor(Math.random() * 10) + 3;
    const b = Math.floor(Math.random() * 10) + 2;
    const question = `${a} + ${b}`;
    const answer = String(a + b);
    const captchaId = crypto.randomBytes(8).toString('hex');
    
    captchaStore.set(captchaId, {
        answer: answer,
        expires: Date.now() + 300000 // 5 –º–∏–Ω—É—Ç
    });
    
    return { captchaId, question };
}

function verifyCaptcha(captchaId, userAnswer) {
    const captcha = captchaStore.get(captchaId);
    if (!captcha) return false;
    if (Date.now() > captcha.expires) {
        captchaStore.delete(captchaId);
        return false;
    }
    const isValid = captcha.answer === String(userAnswer).trim();
    captchaStore.delete(captchaId);
    return isValid;
}

function saveUsersToFile() {
    try {
        const usersData = {};
        registeredUsers.forEach((userData, username) => {
            usersData[username] = userData;
        });
        fs.writeFileSync('users.db.json', JSON.stringify(usersData, null, 2));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
}

function saveOrdersToFile() {
    try {
        fs.writeFileSync('orders.db.json', JSON.stringify(ordersDB, null, 2));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
async function autoScrapeOnStartup() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞...');

    const categories = [
        'electro',
        'electro-09',
        'electro-10',
        'electro-11',
        'acoustic',
        'classic',
        'bass'
    ];

    for (const category of categories) {
        try {
            console.log(`üìä –°–∫—Ä–∞–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);

            // –í—ã–∑—ã–≤–∞–µ–º PHP API –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
            const response = await axios.get(`http://localhost:${PORT}/api.php?category=${category}&limit=100`);

            if (response.data && response.data.products) {
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`);
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}:`, error.message);
        }
    }

    console.log('üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.get('/test', (req, res) => {
    res.json({
        status: 'ok',
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç–µ 8000',
        timestamp: new Date().toISOString()
    });
});

// ===== API ENDPOINTS =====

// –ö–∞–ø—á–∞
app.get('/api/captcha', (req, res) => {
    try {
        const { captchaId, question } = generateCaptcha();
        res.json({
            success: true,
            captchaId: captchaId,
            question: question
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', (req, res) => {
    try {
        const { email, username, password, captchaId, captchaAnswer } = req.body;
        
        if (!email || !username || !password) {
            return res.status(400).json({
                success: false,
                error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'
            });
        }
        
        if (!email.includes('@')) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'
            });
        }
        
        if (username.length < 3) {
            return res.status(400).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π'
            });
        }
        
        if (password.length < 6) {
            return res.status(400).json({
                success: false,
                error: '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π'
            });
        }
        
        if (!verifyCaptcha(captchaId, captchaAnswer)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞'
            });
        }
        
        if (registeredUsers.has(username)) {
            return res.status(409).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
        for (const [existingUsername, userData] of registeredUsers) {
            if (userData.email && userData.email.toLowerCase() === email.toLowerCase()) {
                return res.status(409).json({
                    success: false,
                    error: 'E-mail —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'
                });
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = {
            email: email,
            passwordHash: hashPassword(password),
            displayName: username,
            createdAt: Date.now(),
            photoUrl: null
        };
        
        registeredUsers.set(username, userData);
        saveUsersToFile();
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        const sessionId = crypto.randomBytes(32).toString('hex');
        const user = {
            userId: username,
            displayName: username,
            username: username,
            photoUrl: null,
            language: 'uk'
        };
        
        sessions.set(sessionId, user);
        
        res.json({
            success: true,
            profile: user,
            sessionId: sessionId
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –õ–æ–≥–∏–Ω
app.post('/api/login', (req, res) => {
    try {
        const { displayName, username, password, remember, captchaId, captchaAnswer } = req.body;
        
        const loginName = username || displayName;
        if (!loginName || !password) {
            return res.status(400).json({
                success: false,
                error: '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å'
            });
        }
        
        if (!verifyCaptcha(captchaId, captchaAnswer)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞'
            });
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏–ª–∏ email
        let userRecord = registeredUsers.get(loginName);
        let foundUsername = loginName;
        
        if (!userRecord) {
            // –ü–æ–∏—Å–∫ –ø–æ email
            for (const [uname, record] of registeredUsers) {
                if (record.email && record.email.toLowerCase() === loginName.toLowerCase()) {
                    userRecord = record;
                    foundUsername = uname;
                    break;
                }
            }
        }
        
        if (!userRecord) {
            return res.status(404).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
            });
        }
        
        if (userRecord.passwordHash !== hashPassword(password)) {
            return res.status(401).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
            });
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        const sessionId = crypto.randomBytes(32).toString('hex');
        const user = {
            userId: foundUsername,
            displayName: userRecord.displayName || foundUsername,
            username: foundUsername,
            photoUrl: userRecord.photoUrl,
            language: 'uk'
        };
        
        sessions.set(sessionId, user);
        
        res.json({
            success: true,
            profile: user,
            sessionId: sessionId
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –í—ã—Ö–æ–¥
app.post('/api/logout', (req, res) => {
    try {
        const sessionId = req.headers.authorization || req.body.sessionId;
        if (sessionId) {
            sessions.delete(sessionId);
        }
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user_profile', (req, res) => {
    try {
        const sessionId = req.headers.authorization;
        const user = sessionId ? sessions.get(sessionId) : null;
        
        if (user) {
            return res.json({
                success: true,
                userId: user.userId,
                displayName: user.displayName,
                username: user.username,
                bonuses: 100,
                photoUrl: user.photoUrl,
                language: user.language
            });
        }
        
        // Telegram –¥–∞–Ω–Ω—ã–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const { tg_id, tg_username, tg_first_name, tg_last_name, tg_photo_url } = req.query;
        const displayName = `${tg_first_name || ''} ${tg_last_name || ''}`.trim() || tg_username || 'Guest';
        
        res.json({
            success: true,
            userId: tg_id || 'local-guest',
            displayName: displayName,
            username: tg_username,
            bonuses: 100,
            photoUrl: tg_photo_url,
            language: 'uk'
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user_orders', (req, res) => {
    try {
        const sessionId = req.headers.authorization;
        const user = sessionId ? sessions.get(sessionId) : null;
        const tg_id = req.query.tg_id;
        
        if (!user && !tg_id) {
            return res.status(401).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
                orders: [],
                summary: { totalOrders: 0, bonuses: 0, totalAmount: 0 }
            });
        }
        
        const userIdentifier = user ? (user.username || user.displayName) : tg_id;
        const userOrders = ordersDB.filter(order => {
            if (userIdentifier === 'just_a_legend') return true; // –î–µ–º–æ —Ä–µ–∂–∏–º
            return order.userId === userIdentifier ||
                   order.customer?.name === userIdentifier ||
                   order.customer?.phone?.includes(userIdentifier) ||
                   order.username === userIdentifier;
        });
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
        const formattedOrders = userOrders.map(order => {
            const orderTotal = order.total || 0;
            const deliveryCost = calculateDeliveryCost(order.deliveryMethod, orderTotal);
            const bonusesUsed = order.bonusesUsed || 0;
            const couponDiscount = order.couponDiscount || 0;
            const finalAmount = Math.max(0, orderTotal + deliveryCost - bonusesUsed - couponDiscount);
            
            const customer = order.customer || {};
            const address = `${customer.settlement || ''}, ${customer.branch || ''}`.replace(/^, |, $/, '') || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
            
            return {
                orderId: order.id || '',
                date: (order.date || '').split('T')[0] || order.date || '',
                address: address,
                amount: finalAmount,
                status: getOrderStatusText(order.status || 'accepted')
            };
        }).sort((a, b) => new Date(b.date) - new Date(a.date));
        
        let totalAmount = 0;
        let bonuses = 10; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        
        formattedOrders.forEach(order => {
            totalAmount += order.amount;
            bonuses += Math.floor(order.amount * 0.01); // 1% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
        });
        
        res.json({
            success: true,
            summary: {
                totalOrders: formattedOrders.length,
                bonuses: bonuses,
                totalAmount: totalAmount
            },
            orders: formattedOrders
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message,
            orders: [],
            summary: { totalOrders: 0, bonuses: 0, totalAmount: 0 }
        });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.post('/api/save_order', (req, res) => {
    try {
        console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
        console.log('üì¶ Headers:', req.headers);
        console.log('üì¶ Body type:', typeof req.body);
        console.log('üì¶ Body content:', req.body);
        
        let orderData;
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
        if (typeof req.body === 'string') {
            try {
                orderData = JSON.parse(req.body);
            } catch (parseError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
                console.error('‚ùå –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:', req.body);
                return res.status(400).json({
                    success: false,
                    error: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${parseError.message}`
                });
            }
        } else if (typeof req.body === 'object' && req.body !== null) {
            orderData = req.body;
        } else {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞'
            });
        }
        
        if (!orderData || !orderData.id) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', orderData);
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID'
            });
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanOrderData = cleanOrderDataForJSON(orderData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
        const existingOrderIndex = ordersDB.findIndex(order => order.id === cleanOrderData.id);
        
        if (existingOrderIndex !== -1) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
            ordersDB[existingOrderIndex] = { ...ordersDB[existingOrderIndex], ...cleanOrderData };
            console.log(`üì¶ –û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–∫–∞–∑: ${cleanOrderData.id}`);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            ordersDB.push(cleanOrderData);
            console.log(`üì¶ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: ${cleanOrderData.id}`);
        }
        
        saveOrdersToFile();
        
        res.json({
            success: true,
            message: `–ó–∞–∫–∞–∑ ${cleanOrderData.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
            order_id: cleanOrderData.id
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ save_order:', error);
        console.error('‚ùå Stack:', error.stack);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
function cleanOrderDataForJSON(orderData) {
    try {
        const cleanData = JSON.parse(JSON.stringify(orderData, (key, value) => {
            if (typeof value === 'string') {
                // –£–¥–∞–ª—è–µ–º –∏–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                return value
                    .replace(/[\u0000-\u001F\u007F-\u009F]/g, '') // –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
                    .replace(/\\/g, '\\\\') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
                    .replace(/"/g, '\\"') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
                    .trim();
            }
            return value;
        }));
        return cleanData;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', error);
        return orderData; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –ö–µ—à —Ç–æ–≤–∞—Ä–æ–≤
let productsCache = null;
let cacheTimestamp = null;
const CACHE_DURATION = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

// –¢–æ–≤–∞—Ä—ã (–ø—Ä—è–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è)
app.get('/api/products', async (req, res) => {
    try {
        const { start = 0, limit = 60, search = '' } = req.query;
        const currentTime = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if (!productsCache || !cacheTimestamp || (currentTime - cacheTimestamp > CACHE_DURATION)) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Ç–æ–≤–∞—Ä–æ–≤...');
            productsCache = await scrapeProducts();
            cacheTimestamp = currentTime;
        }
        
        let products = [...productsCache];
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (search) {
            const searchLower = search.toLowerCase();
            products = products.filter(product => 
                product.name.toLowerCase().includes(searchLower)
            );
        }
        
        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        const totalProducts = products.length;
        const startIndex = parseInt(start);
        const limitNum = parseInt(limit);
        const endIndex = startIndex + limitNum;
        const paginatedProducts = products.slice(startIndex, endIndex);
        
        res.json({
            success: true,
            products: paginatedProducts,
            total: totalProducts,
            start: startIndex,
            limit: limitNum,
            hasMore: endIndex < totalProducts
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ API —Ç–æ–≤–∞—Ä–æ–≤:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        res.json({
            success: true,
            products: getTestProducts(),
            total: 5,
            start: 0,
            limit: 60,
            hasMore: false
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function scrapeProducts() {
    const products = [];
    const categories = ['electro', 'acoustic', 'classic', 'bass'];
    
    for (const category of categories) {
        try {
            console.log(`üìä –°–∫—Ä–∞–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);
            
            const response = await axios.get(`https://guitarstrings.com.ua/${category}`, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                },
                timeout: 15000
            });
            
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            const categoryProducts = getTestProducts(category);
            products.push(...categoryProducts);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ ${category}:`, error.message);
        }
    }
    
    return products.length > 0 ? products : getTestProducts();
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
function getTestProducts(category = 'electro') {
    const baseProducts = [
        {
            name: 'Ernie Ball 2221 Regular Slinky 10-46',
            image: 'Goods/Electric_guitar_strings/2221/Ernie_Ball_2221_10-46_150.jpg',
            newPrice: '350',
            oldPrice: '450',
            availability: '–í –Ω–∞–ª–∏—á–∏–∏',
            rating: '4.5',
            category: 'electro'
        },
        {
            name: 'D\'Addario EXL120 Super Light 9-42',
            image: 'Goods/Electric_guitar_strings/EXL120/DAddario_EXL120_9-42.jpg',
            newPrice: '320',
            oldPrice: null,
            availability: '–í –Ω–∞–ª–∏—á–∏–∏',
            rating: '4.8',
            category: 'electro'
        },
        {
            name: 'Elixir 12002 Nanoweb Light 10-46',
            image: 'Goods/Electric_guitar_strings/12002/Elixir_12002_10-46.jpg',
            newPrice: '450',
            oldPrice: '520',
            availability: '–í –Ω–∞–ª–∏—á–∏–∏',
            rating: '4.7',
            category: 'electro'
        },
        {
            name: 'Martin M170 80/20 Bronze Extra Light 10-47',
            image: 'Goods/Acoustic_guitar_strings/M170/Martin_M170_10-47.jpg',
            newPrice: '280',
            oldPrice: null,
            availability: '–í –Ω–∞–ª–∏—á–∏–∏',
            rating: '4.3',
            category: 'acoustic'
        },
        {
            name: 'D\'Addario EJ45 Pro-Arte Normal Tension',
            image: 'Goods/Classical_guitar_strings/EJ45/DAddario_EJ45.jpg',
            newPrice: '420',
            oldPrice: '480',
            availability: '–í –Ω–∞–ª–∏—á–∏–∏',
            rating: '4.6',
            category: 'classic'
        }
    ];
    
    if (category === 'all') return baseProducts;
    return baseProducts.filter(p => p.category === category);
}

// SMS –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ (–∑–∞–≥–ª—É—à–∫–∞)
app.post('/api/sms/request_code', (req, res) => {
    try {
        const { phone } = req.body;
        if (!phone) {
            return res.status(400).json({
                success: false,
                error: '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            });
        }
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS
        console.log(`üì± SMS –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω –¥–ª—è: ${phone}`);
        
        res.json({
            success: true,
            message: 'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// SMS –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ (–∑–∞–≥–ª—É—à–∫–∞)
app.post('/api/sms/confirm', (req, res) => {
    try {
        const { phone, code } = req.body;
        
        if (!phone || !code) {
            return res.status(400).json({
                success: false,
                error: '–¢–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        console.log(`üì± SMS –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è: ${phone}`);
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        const sessionId = crypto.randomBytes(32).toString('hex');
        const user = {
            userId: `user_${phone.slice(-4)}`,
            displayName: phone,
            username: `user_${phone.slice(-4)}`,
            photoUrl: null,
            language: 'uk',
            phone: phone
        };
        
        sessions.set(sessionId, user);
        
        res.json({
            success: true,
            profile: user,
            sessionId: sessionId
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
app.post('/api/send_telegram_notification', (req, res) => {
    try {
        const { message, chatId } = req.body;
        console.log(`üì® Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message} –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
        
        res.json({
            success: true,
            message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ HTML (–¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
app.get('/proxy_fetch', async (req, res) => {
    try {
        const { url } = req.query;
        
        if (!url) {
            return res.status(400).send('Missing url parameter');
        }
        
        if (!url.startsWith('https://guitarstrings.com.ua/')) {
            return res.status(403).send('URL not allowed');
        }
        
        const response = await axios.get(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            },
            timeout: 20000
        });
        
        res.set({
            'Content-Type': 'text/html; charset=utf-8',
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0',
            'Access-Control-Allow-Origin': '*'
        });
        
        res.send(response.data);
        
    } catch (error) {
        console.error('‚ùå Proxy fetch error:', error);
        res.status(502).send(`Proxy error: ${error.message}`);
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateDeliveryCost(deliveryMethod, orderTotal) {
    if (deliveryMethod === 'pickup') return 0;
    if (deliveryMethod === 'nova') return orderTotal < 1000 ? 50 : 0;
    if (deliveryMethod === 'ukrposhta') return orderTotal < 500 ? 30 : 0;
    if (deliveryMethod === 'meest') return orderTotal < 800 ? 45 : 0;
    return 50;
}

function getOrderStatusText(status) {
    const statusMap = {
        'accepted': '–ü—Ä–∏–Ω—è—Ç',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
        'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω'
    };
    return statusMap[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await autoScrapeOnStartup();

    console.log(`üéØ –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:${PORT}/index.html`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
});

const express = require('express');
const path = require('path');
const axios = require('axios');

// ะะพะดะบะปััะฐะตะผ ะบะพะฝัะธะณััะฐัะธั ัะตัะฒะตัะฐ
const serverConfig = require('./config.js');

const app = express();
const PORT = process.env.PORT || 8000;

// ะะพะปััะฐะตะผ ะธะฝัะพัะผะฐัะธั ะพ ัะตะบััะตะผ ะพะบััะถะตะฝะธะธ
const envInfo = serverConfig.getEnvironmentInfo();
console.log('๐ง ะกะตัะฒะตั ะทะฐะฟััะบะฐะตััั ั ะบะพะฝัะธะณััะฐัะธะตะน:', envInfo);

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname)));

// ะคัะฝะบัะธั ะดะปั ะฐะฒัะพะผะฐัะธัะตัะบะพะณะพ ัะบัะฐะฟะธะฝะณะฐ ะฟัะธ ะทะฐะฟััะบะต ัะตัะฒะตัะฐ
async function autoScrapeOnStartup() {
    console.log('๐ ะะฐัะธะฝะฐะตะผ ะฐะฒัะพะผะฐัะธัะตัะบะธะน ัะบัะฐะฟะธะฝะณ ะดะฐะฝะฝัั ะฟัะธ ะทะฐะฟััะบะต ัะตัะฒะตัะฐ...');

    const categories = [
        'electro',
        'electro-09',
        'electro-10',
        'electro-11',
        'acoustic',
        'classic',
        'bass'
    ];

    for (const category of categories) {
        try {
            console.log(`๐ ะกะบัะฐะฟะธะฝะณ ะบะฐัะตะณะพัะธะธ: ${category}`);

            // ะัะทัะฒะฐะตะผ PHP API ะดะปั ัะบัะฐะฟะธะฝะณะฐ
            const apiUrl = `http://localhost:${PORT}/api.php?category=${category}&limit=100`;
            const response = await axios.get(apiUrl);

            if (response.data && response.data.products) {
                console.log(`โ ะะฐะณััะถะตะฝะพ ${response.data.products.length} ัะพะฒะฐัะพะฒ ะดะปั ะบะฐัะตะณะพัะธะธ ${category}`);
            }

        } catch (error) {
            console.error(`โ ะัะธะฑะบะฐ ัะบัะฐะฟะธะฝะณะฐ ะบะฐัะตะณะพัะธะธ ${category}:`, error.message);
        }
    }

    console.log('๐ ะะฒัะพะผะฐัะธัะตัะบะธะน ัะบัะฐะฟะธะฝะณ ะทะฐะฒะตััะตะฝ!');
}

// API endpoint ะดะปั ัะตััะธัะพะฒะฐะฝะธั
app.get('/test', (req, res) => {
    res.json({
        status: 'ok',
        message: 'ะกะตัะฒะตั ัะฐะฑะพัะฐะตั ะฝะฐ ะฟะพััะต 8000',
        timestamp: new Date().toISOString()
    });
});

// ะะฐะฟััะบ ัะตัะฒะตัะฐ
app.listen(PORT, async () => {
    const serverUrl = `http://localhost:${PORT}`;
    console.log(`๐ ะกะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ${serverUrl}`);
    console.log(`๐ง ะะบััะถะตะฝะธะต: ${envInfo.environment} (${envInfo.name})`);
    console.log(`๐ก API Base URL: ${envInfo.apiUrl}`);

    // ะะฒัะพะผะฐัะธัะตัะบะธะน ัะบัะฐะฟะธะฝะณ ะฟัะธ ะทะฐะฟััะบะต
    await autoScrapeOnStartup();

    console.log(`๐ฏ ะัะบัะพะนัะต ะฑัะฐัะทะตั ะธ ะฟะตัะตะนะดะธัะต ะฝะฐ ${serverUrl}/index.html`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\n๐ ะกะตัะฒะตั ะพััะฐะฝะพะฒะปะตะฝ');
    process.exit(0);
});

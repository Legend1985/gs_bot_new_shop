#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from http.server import HTTPServer, SimpleHTTPRequestHandler
import os
import sys
import threading
import time
import json
import requests

class CustomHTTPRequestHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()

    def do_OPTIONS(self):
        self.send_response(200)
        self.end_headers()

    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
        pass

    def handle_one_request(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            super().handle_one_request()
        except (ConnectionAbortedError, BrokenPipeError, ConnectionResetError):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            # –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
            pass

    def proxy_api_request(self, method='GET'):
        """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ api_server (–ø–æ—Ä—Ç 5000)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            path = self.path
            api_url = f'http://localhost:5000{path}'

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è POST
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = None
            if content_length > 0:
                post_data = self.rfile.read(content_length)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
            headers = {}
            for header_name, header_value in self.headers.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
                if header_name.lower() not in ['host', 'content-length']:
                    headers[header_name] = header_value

            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å–µ—Ä–≤–µ—Ä—É
            if method == 'POST' and post_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                content_type = headers.get('Content-Type', '').lower()
                if 'application/json' in content_type:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ JSON
                    json_data = post_data.decode('utf-8') if isinstance(post_data, bytes) else post_data
                    response = requests.post(api_url, data=json_data, headers=headers, timeout=30)
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ form data
                    response = requests.post(api_url, data=post_data, headers=headers, timeout=30)
            else:
                response = requests.get(api_url, headers=headers, timeout=30)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
            self.send_response(response.status_code)
            for header_name, header_value in response.headers.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if header_name.lower() not in ['content-encoding', 'content-length', 'transfer-encoding']:
                    self.send_header(header_name, header_value)
            self.end_headers()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            try:
                self.wfile.write(response.content)
            except (ConnectionAbortedError, BrokenPipeError, ConnectionResetError):
                # –ö–ª–∏–µ–Ω—Ç —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                pass

        except requests.exceptions.RequestException as e:
            try:
                self.send_error(502, f"API Server Error")
            except (ConnectionAbortedError, BrokenPipeError, ConnectionResetError, UnicodeEncodeError):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç–∫–ª—é—á–∏–ª—Å—è
                pass
        except (ConnectionAbortedError, BrokenPipeError, ConnectionResetError):
            # –ö–ª–∏–µ–Ω—Ç —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        except Exception as e:
            try:
                self.send_error(500, f"Proxy Error")
            except (ConnectionAbortedError, BrokenPipeError, ConnectionResetError, UnicodeEncodeError):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç–∫–ª—é—á–∏–ª—Å—è
                pass

    def do_GET(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GET –∑–∞–ø—Ä–æ—Å—ã —Å –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º API"""
        if self.path.startswith('/api/'):
            # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å—ã
            self.proxy_api_request('GET')
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            super().do_GET()

    def do_POST(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º POST –∑–∞–ø—Ä–æ—Å—ã —Å –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º API"""
        if self.path.startswith('/api/'):
            # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å—ã
            self.proxy_api_request('POST')
        else:
            # –î–ª—è –Ω–µ-API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
            self.send_error(404, "POST method not supported for this path")

def run_server(port=8000):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
    os.chdir('.')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –∫–æ—Ä–Ω–µ–≤—É—é –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞

    server_address = ('', port)
    httpd = HTTPServer(server_address, CustomHTTPRequestHandler)

    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:{port}")
    print(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üéØ –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:{port}/index.html")
    print("‚ùå –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        httpd.shutdown()

if __name__ == '__main__':
    port = 8000

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ—Ä—Ç –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        try:
            port = int(sys.argv[1])
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            sys.exit(1)

    run_server(port)

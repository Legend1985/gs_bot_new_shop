#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ Ernie Ball
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ API —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∞–π—Ç–∞
"""

import requests
import json
from bs4 import BeautifulSoup
import re
from typing import List, Dict, Set

def get_api_products() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ API"""
    try:
        response = requests.get('http://localhost:8000/api/products?start=0&limit=1000')
        response.raise_for_status()
        data = response.json()
        
        if data.get('success') and data.get('products'):
            return data['products']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return []
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
        return []
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return []

def scrape_website_ernie_ball() -> List[str]:
    """–°–∫—Ä–∞–ø–∏—Ç —Ç–æ–≤–∞—Ä—ã Ernie Ball —Å —Å–∞–π—Ç–∞"""
    try:
        url = "https://guitarstrings.com.ua/electro/ernie-ball-electric?limit=150"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (h2 —Å —Å—Å—ã–ª–∫–∞–º–∏)
        product_headers = soup.find_all('h2')
        product_names = []
        
        for header in product_headers:
            link = header.find('a')
            if link and 'ernie ball' in link.text.lower():
                product_names.append(link.text.strip())
        
        return product_names
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ —Å–∞–π—Ç–∞: {e}")
        return []
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []

def analyze_missing_products():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ Ernie Ball...")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    print("üì° –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API...")
    api_products = get_api_products()
    
    if not api_products:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã Ernie Ball –∏–∑ API
    api_ernie_ball = [
        product for product in api_products 
        if 'ernie ball' in product['name'].lower()
    ]
    
    print(f"üìä API: –Ω–∞–π–¥–µ–Ω–æ {len(api_ernie_ball)} —Ç–æ–≤–∞—Ä–æ–≤ Ernie Ball")
    print(f"üìä API: –≤—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ {len(api_products)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞
    print("\nüåê –°–∫—Ä–∞–ø–∏–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞...")
    website_products = scrape_website_ernie_ball()
    
    if not website_products:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞")
        return
    
    print(f"üåê –°–∞–π—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(website_products)} —Ç–æ–≤–∞—Ä–æ–≤ Ernie Ball")
    
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    api_names = {product['name'].lower() for product in api_ernie_ball}
    website_names = {name.lower() for name in website_products}
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    missing_in_api = website_names - api_names
    extra_in_api = api_names - website_names
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 60)
    
    if missing_in_api:
        print(f"\n‚ùå –ü–†–û–ü–£–©–ï–ù–û –í API ({len(missing_in_api)} —Ç–æ–≤–∞—Ä–æ–≤):")
        for i, name in enumerate(sorted(missing_in_api), 1):
            print(f"  {i}. {name}")
    else:
        print("\n‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Å–∞–π—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ API")
    
    if extra_in_api:
        print(f"\n‚ûï –õ–ò–®–ù–ò–ï –í API ({len(extra_in_api)} —Ç–æ–≤–∞—Ä–æ–≤):")
        for i, name in enumerate(sorted(extra_in_api), 1):
            print(f"  {i}. {name}")
    else:
        print("\n‚úÖ –õ–∏—à–Ω–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ API –Ω–µ—Ç")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    expected_total = 377
    actual_total = len(api_products)
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–æ–≤–∞—Ä–æ–≤: {expected_total}")
    print(f"  –ù–∞–π–¥–µ–Ω–æ –≤ API: {actual_total}")
    print(f"  –†–∞–∑–Ω–∏—Ü–∞: {expected_total - actual_total}")
    
    if expected_total != actual_total:
        print(f"  ‚ö†Ô∏è  –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {expected_total - actual_total} —Ç–æ–≤–∞—Ä–æ–≤!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print(f"\nüé∏ –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í –° –°–ê–ô–¢–ê (–ø–µ—Ä–≤—ã–µ 10):")
    for i, name in enumerate(website_products[:10], 1):
        print(f"  {i}. {name}")
    
    print(f"\nüé∏ –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í –ò–ó API (–ø–µ—Ä–≤—ã–µ 10):")
    for i, product in enumerate(api_ernie_ball[:10], 1):
        print(f"  {i}. {product['name']}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ Ernie Ball...")
    analyze_missing_products()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
